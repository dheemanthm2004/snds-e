generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  apiKeys              ApiKey[]
  templates            Template[]
  notificationLogs     NotificationLog[]
  scheduledNotifications ScheduledNotification[]
  batchNotifications   BatchNotification[]

  @@map("users")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  userId      String
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Template {
  id          String      @id @default(cuid())
  name        String
  subject     String?
  content     String
  channel     Channel
  variables   Json        @default("[]") // Array of variable names
  isActive    Boolean     @default(true)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationLogs       NotificationLog[]
  scheduledNotifications ScheduledNotification[]
  batchNotifications     BatchNotification[]

  @@map("templates")
}

model NotificationLog {
  id         String            @id @default(cuid())
  to         String
  channel    Channel
  subject    String?
  message    String
  status     NotificationStatus
  error      String?
  attempt    Int               @default(1)
  templateId String?
  variables  Json?
  userId     String?
  metadata   Json?             // Additional data like delivery time, etc.
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  template Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("notification_logs")
}

model ScheduledNotification {
  id         String                    @id @default(cuid())
  to         String
  channel    Channel
  subject    String?
  message    String
  sendAt     DateTime
  status     ScheduledNotificationStatus @default(PENDING)
  templateId String?
  variables  Json?
  userId     String?
  metadata   Json?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  template Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("scheduled_notifications")
}

model BatchNotification {
  id          String                @id @default(cuid())
  name        String
  channel     Channel
  subject     String?
  message     String
  recipients  Json                  // Array of recipient objects
  status      BatchNotificationStatus @default(PENDING)
  templateId  String?
  variables   Json?
  userId      String?
  totalCount  Int                   @default(0)
  sentCount   Int                   @default(0)
  failedCount Int                   @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  metadata    Json?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  template Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("batch_notifications")
}

model SystemMetrics {
  id                    String   @id @default(cuid())
  date                  DateTime @unique @default(now())
  totalNotifications    Int      @default(0)
  successfulNotifications Int    @default(0)
  failedNotifications   Int      @default(0)
  emailNotifications    Int      @default(0)
  smsNotifications      Int      @default(0)
  inAppNotifications    Int      @default(0)
  avgDeliveryTime       Float?   // in milliseconds
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("system_metrics")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum Channel {
  EMAIL
  SMS
  IN_APP
}

enum NotificationStatus {
  SUCCESS
  FAILED
  PENDING
}

enum ScheduledNotificationStatus {
  PENDING
  QUEUED
  SENT
  FAILED
  CANCELLED
}

enum BatchNotificationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}